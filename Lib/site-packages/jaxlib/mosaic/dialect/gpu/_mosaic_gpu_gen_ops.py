
# Autogenerated by mlir-tblgen; don't manually edit.

from jaxlib.mlir.dialects._ods_common import _cext as _ods_cext
from jaxlib.mlir.dialects._ods_common import (
    equally_sized_accessor as _ods_equally_sized_accessor,
    get_default_loc_context as _ods_get_default_loc_context,
    get_op_result_or_op_results as _get_op_result_or_op_results,
    get_op_result_or_value as _get_op_result_or_value,
    get_op_results_or_values as _get_op_results_or_values,
    segmented_accessor as _ods_segmented_accessor,
)
_ods_ir = _ods_cext.ir

import builtins
from typing import Sequence as _Sequence, Union as _Union


@_ods_cext.register_dialect
class _Dialect(_ods_ir.Dialect):
  DIALECT_NAMESPACE = "mosaic_gpu"

@_ods_cext.register_operation(_Dialect)
class AsyncLoadOp(_ods_ir.OpView):
  OPERATION_NAME = "mosaic_gpu.async_load"

  _ODS_OPERAND_SEGMENTS = [1,1,1,-1,0,]

  _ODS_REGIONS = (0, True)

  def __init__(self, source, destination, barrier, indices, slice_lengths, transforms, collective, *, predicate=None, swizzle=None, arrive=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(source))
    operands.append(_get_op_result_or_value(destination))
    operands.append(_get_op_result_or_value(barrier))
    operands.append(_get_op_results_or_values(indices))
    operands.append(_get_op_result_or_value(predicate) if predicate is not None else None)
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["slice_lengths"] = (slice_lengths if (
    isinstance(slice_lengths, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('DenseI64ArrayAttr')) else
      _ods_ir.AttrBuilder.get('DenseI64ArrayAttr')(slice_lengths, context=_ods_context))
    attributes["transforms"] = (transforms if (
    isinstance(transforms, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('anonymous_637')) else
      _ods_ir.AttrBuilder.get('anonymous_637')(transforms, context=_ods_context))
    if swizzle is not None: attributes["swizzle"] = (swizzle if (
        isinstance(swizzle, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('MosaicGPU_SwizzlingModeAttr')) else
          _ods_ir.AttrBuilder.get('MosaicGPU_SwizzlingModeAttr')(swizzle, context=_ods_context))
    if arrive is not None: attributes["arrive"] = (arrive if (
        isinstance(arrive, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('BoolAttr')) else
          _ods_ir.AttrBuilder.get('BoolAttr')(arrive, context=_ods_context))
    attributes["collective"] = (collective if (
    isinstance(collective, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('anonymous_643')) else
      _ods_ir.AttrBuilder.get('anonymous_643')(collective, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def source(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 0)
    return operand_range[0]

  @builtins.property
  def destination(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 1)
    return operand_range[0]

  @builtins.property
  def barrier(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 2)
    return operand_range[0]

  @builtins.property
  def indices(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 3)
    return operand_range

  @builtins.property
  def predicate(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 4)
    return operand_range[0] if len(operand_range) > 0 else None

  @builtins.property
  def slice_lengths(self):
    return self.operation.attributes["slice_lengths"]

  @slice_lengths.setter
  def slice_lengths(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["slice_lengths"] = value

  @builtins.property
  def transforms(self):
    return self.operation.attributes["transforms"]

  @transforms.setter
  def transforms(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["transforms"] = value

  @builtins.property
  def swizzle(self):
    return self.operation.attributes["swizzle"]

  @swizzle.setter
  def swizzle(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["swizzle"] = value

  @builtins.property
  def arrive(self):
    return self.operation.attributes["arrive"]

  @arrive.setter
  def arrive(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["arrive"] = value

  @builtins.property
  def collective(self):
    return self.operation.attributes["collective"]

  @collective.setter
  def collective(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["collective"] = value

def async_load(source, destination, barrier, indices, slice_lengths, transforms, collective, *, predicate=None, swizzle=None, arrive=None, loc=None, ip=None) -> _ods_ir.Operation:
  return AsyncLoadOp(source=source, destination=destination, barrier=barrier, indices=indices, slice_lengths=slice_lengths, transforms=transforms, collective=collective, predicate=predicate, swizzle=swizzle, arrive=arrive, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class AsyncStoreOp(_ods_ir.OpView):
  OPERATION_NAME = "mosaic_gpu.async_store"

  _ODS_OPERAND_SEGMENTS = [1,1,-1,0,]

  _ODS_REGIONS = (0, True)

  def __init__(self, source, destination, indices, slice_lengths, transforms, *, predicate=None, swizzle=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(source))
    operands.append(_get_op_result_or_value(destination))
    operands.append(_get_op_results_or_values(indices))
    operands.append(_get_op_result_or_value(predicate) if predicate is not None else None)
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["slice_lengths"] = (slice_lengths if (
    isinstance(slice_lengths, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('DenseI64ArrayAttr')) else
      _ods_ir.AttrBuilder.get('DenseI64ArrayAttr')(slice_lengths, context=_ods_context))
    attributes["transforms"] = (transforms if (
    isinstance(transforms, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('anonymous_637')) else
      _ods_ir.AttrBuilder.get('anonymous_637')(transforms, context=_ods_context))
    if swizzle is not None: attributes["swizzle"] = (swizzle if (
        isinstance(swizzle, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('MosaicGPU_SwizzlingModeAttr')) else
          _ods_ir.AttrBuilder.get('MosaicGPU_SwizzlingModeAttr')(swizzle, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def source(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 0)
    return operand_range[0]

  @builtins.property
  def destination(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 1)
    return operand_range[0]

  @builtins.property
  def indices(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 2)
    return operand_range

  @builtins.property
  def predicate(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 3)
    return operand_range[0] if len(operand_range) > 0 else None

  @builtins.property
  def slice_lengths(self):
    return self.operation.attributes["slice_lengths"]

  @slice_lengths.setter
  def slice_lengths(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["slice_lengths"] = value

  @builtins.property
  def transforms(self):
    return self.operation.attributes["transforms"]

  @transforms.setter
  def transforms(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["transforms"] = value

  @builtins.property
  def swizzle(self):
    return self.operation.attributes["swizzle"]

  @swizzle.setter
  def swizzle(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["swizzle"] = value

def async_store(source, destination, indices, slice_lengths, transforms, *, predicate=None, swizzle=None, loc=None, ip=None) -> _ods_ir.Operation:
  return AsyncStoreOp(source=source, destination=destination, indices=indices, slice_lengths=slice_lengths, transforms=transforms, predicate=predicate, swizzle=swizzle, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class InitializeBarrierOp(_ods_ir.OpView):
  OPERATION_NAME = "mosaic_gpu.initialize_barrier"

  _ODS_REGIONS = (0, True)

  def __init__(self, barriers_ref, base_pointer, arrival_count, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(base_pointer))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["arrival_count"] = (arrival_count if (
    isinstance(arrival_count, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I64Attr')) else
      _ods_ir.AttrBuilder.get('I64Attr')(arrival_count, context=_ods_context))
    results.append(barriers_ref)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def base_pointer(self):
    return self.operation.operands[0]

  @builtins.property
  def arrival_count(self):
    return self.operation.attributes["arrival_count"]

  @arrival_count.setter
  def arrival_count(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["arrival_count"] = value

  @builtins.property
  def barriers_ref(self):
    return self.operation.results[0]

def initialize_barrier(barriers_ref, base_pointer, arrival_count, *, loc=None, ip=None) -> _ods_ir.Value:
  return InitializeBarrierOp(barriers_ref=barriers_ref, base_pointer=base_pointer, arrival_count=arrival_count, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class WGMMAOp(_ods_ir.OpView):
  OPERATION_NAME = "mosaic_gpu.wgmma"

  _ODS_REGIONS = (0, True)

  def __init__(self, accumulator, a, b, *, swizzle=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(accumulator))
    operands.append(_get_op_result_or_value(a))
    operands.append(_get_op_result_or_value(b))
    _ods_context = _ods_get_default_loc_context(loc)
    if swizzle is not None: attributes["swizzle"] = (swizzle if (
        isinstance(swizzle, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('MosaicGPU_SwizzlingModeAttr')) else
          _ods_ir.AttrBuilder.get('MosaicGPU_SwizzlingModeAttr')(swizzle, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def accumulator(self):
    return self.operation.operands[0]

  @builtins.property
  def a(self):
    return self.operation.operands[1]

  @builtins.property
  def b(self):
    return self.operation.operands[2]

  @builtins.property
  def swizzle(self):
    return self.operation.attributes["swizzle"]

  @swizzle.setter
  def swizzle(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["swizzle"] = value

def wgmma(accumulator, a, b, *, swizzle=None, loc=None, ip=None) -> _ods_ir.Operation:
  return WGMMAOp(accumulator=accumulator, a=a, b=b, swizzle=swizzle, loc=loc, ip=ip)

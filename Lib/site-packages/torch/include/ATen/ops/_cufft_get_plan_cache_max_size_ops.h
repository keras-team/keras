#pragma once

// @generated by torchgen/gen.py from Operator.h

#include <tuple>
#include <vector>

// Forward declarations of any types needed in the operator signatures.
// We can't directly include these classes because it will cause circular include dependencies.
// This file is included by TensorBody.h, which defines the Tensor class.
#include <ATen/core/ATen_fwd.h>

namespace at {
namespace _ops {


struct TORCH_API _cufft_get_plan_cache_max_size {
  using schema = int64_t (at::DeviceIndex);
  using ptr_schema = schema*;
  // See Note [static constexpr char* members for windows NVCC]
  static constexpr const char* name = "aten::_cufft_get_plan_cache_max_size";
  static constexpr const char* overload_name = "";
  static constexpr const char* schema_str = "_cufft_get_plan_cache_max_size(DeviceIndex device_index) -> int";
  static int64_t call(at::DeviceIndex device_index);
  static int64_t redispatch(c10::DispatchKeySet dispatchKeySet, at::DeviceIndex device_index);
};

}} // namespace at::_ops

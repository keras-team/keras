#pragma once

// @generated by torchgen/gen.py from Operator.h

#include <tuple>
#include <vector>

// Forward declarations of any types needed in the operator signatures.
// We can't directly include these classes because it will cause circular include dependencies.
// This file is included by TensorBody.h, which defines the Tensor class.
#include <ATen/core/ATen_fwd.h>

namespace at {
namespace _ops {


struct TORCH_API _linalg_check_errors {
  using schema = void (const at::Tensor &, c10::string_view, bool);
  using ptr_schema = schema*;
  // See Note [static constexpr char* members for windows NVCC]
  static constexpr const char* name = "aten::_linalg_check_errors";
  static constexpr const char* overload_name = "";
  static constexpr const char* schema_str = "_linalg_check_errors(Tensor info, str api_name, *, bool is_matrix) -> ()";
  static void call(const at::Tensor & info, c10::string_view api_name, bool is_matrix);
  static void redispatch(c10::DispatchKeySet dispatchKeySet, const at::Tensor & info, c10::string_view api_name, bool is_matrix);
};

}} // namespace at::_ops

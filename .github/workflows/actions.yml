name: Tests

# TODO: Consider enabling all tests (pytest, applications, etc.) with NNX in the future
# Currently only basic flow tests run with NNX enabled

on:
  push:
    branches: [ master ]
  pull_request:
  release:
    types: [created]

permissions:
  contents: read

jobs:
  build-and-test-on-tpu:
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.10']
        backend: [jax]
    name: Run TPU tests
    runs-on: 
      - linux-x86-ct5lp-112-4tpu
      # - linux-x86-ct5lp-112-4tpu-fvn6n-runner-6kb8n
      # - linux-x86-ct6e-44-1tpu
      # - linux-x86-ct6e-44-1tpu-4khbn-runner-x4st4
      # - linux-x86-ct6e-44-1tpu-4khbn-runner-45nmc


    container:
      # Use an official Docker image that includes the Docker CLI.
      # This allows you to run 'docker' commands from within this job's container.
      # 'docker:latest' is a good choice. You could also specify a version like 'docker:24.0.5'.
      image: docker:latest
      # Mount the host's Docker socket into this container.
      # This is CRUCIAL: It allows 'docker' commands executed *inside* this container
      # to control the *host's* Docker daemon.
      # volumes:
      #   - /var/run/docker.sock:/var/run/docker.sock
      # Running this "controlling" container in privileged mode is often necessary
      # when it needs to manage other containers and access host resources like TPUs
      # through the host's Docker daemon.
      options: --privileged

    env:
      PYTHON: ${{ matrix.python-version }}
      KERAS_HOME: .github/workflows/config/${{ matrix.backend }}
      KERAS_BACKEND: jax
      PROJECT_ID: gtech-rmi-dev  # Replace with your GCP project ID
      GAR_LOCATION: us-central1        # Replace with your Artifact Registry location (e.g., us-central1)
      IMAGE_NAME: keras-jax-tpu-amd64:latest          # Name of your Docker image
      TPU_VM_NAME: kharshith-jax-tpu    # Replace with your TPU VM instance name
      TPU_VM_ZONE: us-central1-b       # Replace with your TPU VM zone

    steps:

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Docker (if not present)
        run: |
          # Check if docker is already installed
          if ! command -v docker &> /dev/null
          then
              echo "Docker not found. Installing Docker..."
              # Update apt package index
              sudo apt-get update
              # Install packages to allow apt to use a repository over HTTPS
              sudo apt-get install -y ca-certificates curl gnupg
              # Add Docker's official GPG key
              sudo install -m 0755 -d /etc/apt/keyrings
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
              sudo chmod a+r /etc/apt/keyrings/docker.gpg
              # Add the repository to Apt sources
              echo \
                "deb [arch=\"$(dpkg --print-architecture)\" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
                \"$(. /etc/os-release && echo \"$VERSION_CODENAME\")\" stable" | \
                sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              # Install Docker Engine, containerd, and Docker Compose
              sudo apt-get update
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
              # Add the current user (runner user) to the docker group to run docker without sudo
              sudo usermod -aG docker $USER
              # You might need to log out and log back in for group changes to take effect,
              # or restart the Docker daemon and the runner agent.
              # For a CI environment, `newgrp docker` might work temporarily or a restart is implied.
              sudo systemctl start docker
              sudo systemctl enable docker
              echo "Docker installed."
          else
              echo "Docker is already installed."
          fi

      - name: Set up Docker BuildX
        uses: docker/setup-buildx-action@v3


      - name: Build Docker image for TPU tests
        run: |
          echo "Building Docker image using Dockerfile at .github/workflows/tpu/Dockerfile..."
          # Use 'sudo docker' if the 'docker' group membership hasn't fully applied yet.
          docker build -f .github/workflows/tpu/Dockerfile -t keras-tpu-test .
          echo "Docker image built successfully."

      - name: Run Docker container and execute tests on TPU
        run: |
          echo "Running Docker container with TPU access and executing tests..."
          # Use 'sudo docker' if the 'docker' group membership hasn't fully applied yet.
          docker run --rm \
            --privileged \
            --network host \
            -e PYTHON=${{ env.PYTHON }} \
            -e KERAS_HOME=${{ env.KERAS_HOME }} \
            -e KERAS_BACKEND=${{ env.KERAS_BACKEND }} \
            keras-tpu-test \
            /bin/bash -c "\
              echo 'Verifying JAX TPU backend inside container...' && \
              python3 -c 'import jax; print(\"JAX Version:\", jax.__version__); print(\"Default Backend:\", jax.default_backend()); assert jax.default_backend().lower() == \"tpu\", \"TPU backend not found or not default\"; print(\"TPU verification successful!\")' \
              # Add your actual pytest command here. Ensure pytest is installed inside your Docker image.
            "
          echo "Docker container finished running tests."

  build:
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.10']
        backend: [tensorflow, jax, torch, numpy, openvino]
        nnx_enabled: [false]
        include:
          - python-version: '3.10'
            backend: jax
            nnx_enabled: true
    name: ${{ matrix.backend == 'jax' && format('Run tests ({0}, {1}, nnx_enabled = {2})', matrix.python-version, matrix.backend, matrix.nnx_enabled) || format('Run tests ({0}, {1})', matrix.python-version, matrix.backend) }}
    runs-on: ubuntu-latest
    env:
      PYTHON: ${{ matrix.python-version }}
      KERAS_HOME: .github/workflows/config/${{ matrix.backend }}
    steps:
      - uses: actions/checkout@v4
      - name: Check for changes in keras/src/applications
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            applications:
              - 'keras/src/applications/**'
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Get pip cache dir
        id: pip-cache
        run: |
          python -m pip install --upgrade pip setuptools
          echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT
      - name: pip cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml') }}-${{ hashFiles('requirements.txt') }}
      - name: Install dependencies
        run: |
          pip install -r requirements.txt --progress-bar off --upgrade
          if [ "${{ matrix.nnx_enabled }}" == "true" ]; then
            pip install --upgrade git+https://github.com/google/flax.git
          fi
          pip uninstall -y keras keras-nightly
          pip install -e "." --progress-bar off --upgrade
      - name: Test applications with pytest
        if: ${{ steps.filter.outputs.applications == 'true' && matrix.nnx_enabled == false }}
        run: |
          pytest keras/src/applications --cov=keras/src/applications --cov-config=pyproject.toml
          coverage xml --include='keras/src/applications/*' -o apps-coverage.xml
      - name: Codecov keras.applications
        if: ${{ steps.filter.outputs.applications == 'true' && matrix.nnx_enabled == false }}
        uses: codecov/codecov-action@v5
        with:
          env_vars: PYTHON,KERAS_HOME
          flags: keras.applications,keras.applications-${{ matrix.backend }}
          files: apps-coverage.xml
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false
      - name: Test integrations
        if: ${{ matrix.backend != 'numpy' && matrix.nnx_enabled == false }}
        run: |
          python integration_tests/import_test.py
          python integration_tests/numerical_test.py
      - name: Test JAX-specific integrations
        if: ${{ matrix.backend == 'jax' && matrix.nnx_enabled == false }}
        run: |
          python integration_tests/jax_custom_fit_test.py
      - name: Test basic flow with NNX
        if: ${{ matrix.nnx_enabled == true }}
        env:
          KERAS_NNX_ENABLED: true
        run: |
          python integration_tests/import_test.py
          python integration_tests/basic_full_flow.py
      - name: Test TF-specific integrations
        if: ${{ matrix.backend == 'tensorflow'}}
        run: |
          python integration_tests/tf_distribute_training_test.py
          python integration_tests/tf_custom_fit_test.py
      - name: Test Torch-specific integrations
        if: ${{ matrix.backend == 'torch'}}
        run: |
          pytest integration_tests/torch_workflow_test.py
          python integration_tests/torch_custom_fit_test.py
      - name: Test with pytest
        if: ${{ matrix.nnx_enabled == false }}
        run: |
          if [ "${{ matrix.backend }}" == "openvino" ]; then
            IGNORE_FILE="keras/src/backend/openvino/excluded_tests.txt"
            IGNORE_ARGS=$(awk '{print "--ignore=" $0}' "$IGNORE_FILE")
          else
            IGNORE_ARGS=""
          fi
          pytest keras --ignore keras/src/applications --cov=keras --cov-config=pyproject.toml $IGNORE_ARGS
          coverage xml --omit='keras/src/applications/*,keras/api' -o core-coverage.xml
      - name: Codecov keras
        if: ${{ matrix.nnx_enabled == false }}
        uses: codecov/codecov-action@v5
        with:
          env_vars: PYTHON,KERAS_HOME,KERAS_NNX_ENABLED
          flags: keras,keras-${{ matrix.backend }}${{ matrix.nnx_enabled == 'true' && '-nnx' || '' }}
          files: core-coverage.xml
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

  format:
    name: Check the code format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Get pip cache dir
        id: pip-cache
        run: |
          python -m pip install --upgrade pip setuptools
          echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT
      - name: pip cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml') }}-${{ hashFiles('requirements.txt') }}
      - name: Install dependencies
        run: |
          pip install -r requirements.txt --progress-bar off --upgrade
          pip uninstall -y keras keras-nightly
          pip install -e "." --progress-bar off --upgrade
      - name: Run pre-commit
        run: pre-commit run --all-files --hook-stage manual

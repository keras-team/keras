# name: TPU Tests

# on:
#   push:
#     branches: [ master ]
#   pull_request:
#   release:
#     types: [created]

# permissions:
#   contents: read

# jobs:
#   test-on-tpu-runner:
#     name: Test on TPU Runner
#     runs-on: linux-x86-ct6e-44-1tpu

#     # STAGE 1: Use a public Google Cloud SDK image for the main job container.
#     # This satisfies the runner's "container required" rule without needing prior authentication.
#     container:
#       image: gcr.io/google.com/cloudsdktool/cloud-sdk:slim
#       # Mount the host's Docker socket into this container. This allows steps inside
#       # to use the host's Docker daemon, which is critical.
#       # Privileged and network host are needed for the final test container to access TPU hardware.
#       options: --privileged --network host -v /var/run/docker.sock:/var/run/docker.sock

#     steps:
#       - name: Authenticate to Google Cloud
#         uses: google-github-actions/auth@v2
#         with:
#           # This authenticates the environment inside the gcloud-sdk container.
#           credentials_json: ${{ secrets.GCP_CREDENTIALS }}

#       - name: Checkout Repository
#         uses: actions/checkout@v4

#       - name: Run Tests Inside Pre-Built Container
#         # STAGE 2: Now that we are authenticated, we can use the Docker CLI
#         # (talking to the host's daemon via the mounted socket) to run our private container.
#         run: |
#           echo "Pulling the private test container from GAR..."
#           docker pull us-central1-docker.pkg.dev/gtech-rmi-dev/keras-docker-images/keras-jax-tpu-amd64:latest

#           echo "Running the test container..."
#           docker run --rm --privileged --network host \
#             -v "${{ github.workspace }}":"/github/workspace" \
#             --workdir "/github/workspace" \
#             us-central1-docker.pkg.dev/gtech-rmi-dev/keras-docker-images/keras-jax-tpu-amd64:latest \
#             bash -c '
#               echo "Successfully running inside the custom container from GAR!"
#               echo "Current working directory:"
#               pwd
#               echo "Contents of current directory:"
#               ls -la
#               echo "Verifying JAX installation..."
#               python3 -c "import jax; print(f\"JAX backend: {jax.default_backend()}\"); print(f\"JAX devices: {jax.devices()}\")"
#             '



name: TPU Tests

on:
  push:
    branches: [ master ]
  pull_request:
  release:
    types: [created]

# Only basic permissions are needed now.
permissions:
  contents: read

jobs:
  test-in-container:
    name: Test in Custom Container
    runs-on: linux-x86-ct6e-44-1tpu

    # With the correct IAM policies applied to the runner's underlying service accounts,
    # the runner can now pull this private image directly without any in-workflow auth.
    container:
      image: us-central1-docker.pkg.dev/gtech-rmi-dev/keras-docker-images/keras-jax-tpu-amd64:latest
      # Options are still needed for the container to access the host's TPU hardware.
      options: --privileged --network host

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        # This makes your code available inside the container's workspace.

      - name: Run Verification and Tests
        run: |
          echo "Successfully running inside the private container from GAR!"
          echo "Verifying JAX installation..."
          python3 -c "import jax; print(f'JAX backend: {jax.default_backend()}'); print(f'JAX devices: {jax.devices()}')"
          pip install grain
          pytest keras --ignore keras/src/applications \
                      --ignore keras/src/layers/merging/merging_test.py \
                      --ignore keras/src/trainers/data_adapters/py_dataset_adapter_test.py \
                      --ignore keras/src/backend/jax/distribution_lib_test.py \
                      --ignore keras/src/distribution/distribution_lib_test.py \
                      --cov=keras \
                      --cov-config=pyproject.toml

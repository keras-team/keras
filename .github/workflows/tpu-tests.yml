name: TPU Tests

on:
  push:
    branches: [ master ]
  pull_request:
  release:
    types: [created]

permissions:
  contents: read # Only read permission is needed for checkout

# Remove these from 'env'
# env:
#   PROJECT_ID: gtech-rmi-dev
#   GAR_LOCATION: us-central1
#   GAR_REPO: keras-docker-images
#   IMAGE_NAME: keras-jax-tpu-amd64
#   IMAGE_TAG: latest
#   FULL_TPU_IMAGE_PATH: us-central1-docker.pkg.dev/gtech-rmi-dev/keras-docker-images/keras-jax-tpu-amd64:latest

# --- Define the image path using 'vars' ---
vars:
  PROJECT_ID: gtech-rmi-dev                  # Define these if you want to use them for other purposes
  GAR_LOCATION: us-central1
  GAR_REPO: keras-docker-images
  IMAGE_NAME: keras-jax-tpu-amd64
  IMAGE_TAG: latest
  FULL_TPU_IMAGE_PATH: us-central1-docker.pkg.dev/gtech-rmi-dev/keras-docker-images/keras-jax-tpu-amd64:latest
# ------------------------------------------

jobs:
  pull-and-use-image:
    name: Pull & Use Image from GAR

    # You can still have an 'env' block here or at the workflow level for *other* variables
    # that steps might need. Just not for the 'container.image' definition.
    env:
      # Example: an env variable that steps within the container might use
      TF_CPP_MIN_LOG_LEVEL: 2

    runs-on:
      # - linux-x86-ct5lp-112-4tpu
      - linux-x86-ct6e-44-1tpu
      # - keras-jax-tpu-runner

    container:
      # *** THIS IS THE CRITICAL CHANGE: Use 'vars' instead of 'env' ***
      image: ${{ vars.FULL_TPU_IMAGE_PATH }}
      options: --privileged --network host # Add any necessary options for the job container

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Verify Environment inside Container
        run: |
          echo "Current working directory: $(pwd)"
          echo "Contents of current directory:"
          ls -la
          # Verify Python, JAX, etc., inside the container
          python3 -c "import jax; print(jax.default_backend()); print(jax.devices())"
          # Add any other verification steps here

      # - name: Authenticate to Google Cloud with Service Account Key
      #   id: 'auth'
      #   uses: 'google-github-actions/auth@v2'
      #   with:
      #     # Pass the content of your GitHub Secret directly here.
      #     credentials_json: '${{ secrets.GCP_SA_KEY }}'

      # - name: Configure Docker to use Google Artifact Registry
      #   run: |
      #     echo "Configuring Docker to authenticate with Google Artifact Registry..."
      #     # This command uses the credentials set by the 'auth' step to configure Docker.
      #     gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev
      #     echo "Docker configured."

      # - name: Pull Docker Image from Artifact Registry
      #   run: |
      #     FULL_IMAGE_PATH="${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.GAR_REPO }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
      #     echo "Attempting to pull image: $FULL_IMAGE_PATH"
      #     docker pull "$FULL_IMAGE_PATH"
      #     echo "Successfully pulled image: $FULL_IMAGE_PATH"

      # - name: Verify Pulled Image (Optional)
      #   run: |
      #     echo "Listing local Docker images..."
      #     docker images | grep "${{ env.IMAGE_NAME }}"
      #     echo "Image verification complete."

      # - name: Run Docker Container (with TPU options if on TPU VM)
      #   run: |
      #     FULL_IMAGE_PATH="${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.GAR_REPO }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
      #     echo "Running Docker container: $FULL_IMAGE_PATH"
      #     # IMPORTANT: Add --privileged and --network host ONLY IF this job is running
      #     # on your TPU VM self-hosted runner AND it has the necessary permissions.
      #     # If running on 'ubuntu-latest', these flags are not meaningful for TPU access.
      #     docker run --rm \
      #       --privileged \
      #       --network host \
      #       "$FULL_IMAGE_PATH" \
      #       /bin/bash -c " \
      #         echo 'Container is running...'; \
      #         # Add your test or verification commands here, e.g.:
      #         # python3 -c 'import jax; print(jax.default_backend())'; \
      #         # pytest your_tests.py; \
      #         echo 'Container execution finished.'; \
      #       "
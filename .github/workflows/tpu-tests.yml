name: TPU Tests

on:
  push:
    branches: [ master ]
  pull_request:
  release:
    types: [created]

permissions:
  contents: read # Only read permission is needed for checkout
  packages: write


jobs:
  # JOB 1: Build the image and save it as an artifact
  build-and-save-image:
    name: Build Image and Save as Artifact
    runs-on: ubuntu-latest # A standard runner is fine for building

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          context: .
          # Do not push to a registry
          push: false
          # Load the image into the local Docker daemon so we can save it
          load: true
          # Tag the image for local use
          tags: local-tpu-image:latest

      - name: Save Docker image as a tar file
        run: docker save --output tpu-image.tar local-tpu-image:latest

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: tpu-image-artifact
          path: tpu-image.tar
          retention-days: 1 # Keep the artifact for only one day

  # JOB 2: Load the image from the artifact and run tests
  load-and-test:
    name: Load and Test Image
    needs: build-and-save-image # Must wait for Job 1 to finish
    runs-on: linux-x86-ct6e-44-1tpu

    # WORKAROUND: Use a minimal, public image simply to satisfy the runner's
    # requirement that a container MUST be specified. The actual tests will
    # not run in this container.
    container:
      image: ubuntu:22.04

    steps:
      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: tpu-image-artifact

      - name: Load Docker image from tar file
        run: docker load --input tpu-image.tar

      - name: Checkout repository code
        uses: actions/checkout@v4
        # We need the source code available to mount into the container for testing.

      - name: Run Tests Inside the Loaded Container
        run: |
          echo "Running tests inside the custom-loaded container..."
          
          # Manually run the container we loaded from the artifact.
          docker run --rm \
            --workdir /app \
            -v "$(pwd)":/app \
            --privileged --network host \
            local-tpu-image:latest \
            bash -c "
              echo 'Successfully running inside the on-the-fly container!'
              echo 'Current working directory inside container:'
              pwd
              echo 'Contents of current directory:'
              ls -la
              echo 'Verifying JAX installation...'
              python3 -c \"import jax; print(f'JAX backend: {jax.default_backend()}'); print(f'JAX devices: {jax.devices()}')\"
            "






  # pull-and-use-image:
  #   name: Pull & Use Image from GAR

  #   runs-on: linux-x86-ct6e-44-1tpu

  #   # The container image path must be a complete string.
  #   # The 'env' context is not available here.
  #   # Note the corrected GAR path format: 'us-central1-docker.pkg.dev'
  #   container:
  #     # image: us-central1-docker.pkg.dev/gtech-rmi-dev/keras-docker-images/keras-jax-tpu-amd64:latest
  #     image: ubuntu:22.04
  #     # options: --privileged --network host

  #   steps:

  #     - name: Verify Container Environment
  #       run: |
  #         echo "Successfully started the public container! âœ…"
  #         echo "OS Details:"
  #         cat /etc/os-release





      # - name: Checkout Repository
      #   uses: actions/checkout@v4

      # - name: Verify Environment inside Container
      #   run: |
      #     echo "Current working directory: $(pwd)"
      #     echo "Contents of current directory:"
      #     ls -la
      #     # Verify Python, JAX, etc., inside the container
      #     echo "Verifying JAX installation..."
      #     python3 -c "import jax; print(f'JAX backend: {jax.default_backend()}'); print(f'JAX devices: {jax.devices()}')"




      # - name: Authenticate to Google Cloud with Service Account Key
      #   id: 'auth'
      #   uses: 'google-github-actions/auth@v2'
      #   with:
      #     # Pass the content of your GitHub Secret directly here.
      #     credentials_json: '${{ secrets.GCP_SA_KEY }}'

      # - name: Configure Docker to use Google Artifact Registry
      #   run: |
      #     echo "Configuring Docker to authenticate with Google Artifact Registry..."
      #     # This command uses the credentials set by the 'auth' step to configure Docker.
      #     gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev
      #     echo "Docker configured."

      # - name: Pull Docker Image from Artifact Registry
      #   run: |
      #     FULL_IMAGE_PATH="${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.GAR_REPO }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
      #     echo "Attempting to pull image: $FULL_IMAGE_PATH"
      #     docker pull "$FULL_IMAGE_PATH"
      #     echo "Successfully pulled image: $FULL_IMAGE_PATH"

      # - name: Verify Pulled Image (Optional)
      #   run: |
      #     echo "Listing local Docker images..."
      #     docker images | grep "${{ env.IMAGE_NAME }}"
      #     echo "Image verification complete."

      # - name: Run Docker Container (with TPU options if on TPU VM)
      #   run: |
      #     FULL_IMAGE_PATH="${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.GAR_REPO }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
      #     echo "Running Docker container: $FULL_IMAGE_PATH"
      #     # IMPORTANT: Add --privileged and --network host ONLY IF this job is running
      #     # on your TPU VM self-hosted runner AND it has the necessary permissions.
      #     # If running on 'ubuntu-latest', these flags are not meaningful for TPU access.
      #     docker run --rm \
      #       --privileged \
      #       --network host \
      #       "$FULL_IMAGE_PATH" \
      #       /bin/bash -c " \
      #         echo 'Container is running...'; \
      #         # Add your test or verification commands here, e.g.:
      #         # python3 -c 'import jax; print(jax.default_backend())'; \
      #         # pytest your_tests.py; \
      #         echo 'Container execution finished.'; \
      #       "